from math import ceil
from kandinsky import fill_rect as fr

a="01110;00001;01111;10001;10001;11111"
b="100000;100000;100000;101110;110001;100001;100001;110010;101100"
c="00111;01000;10000;10000;01000;00111"
d="00001;00001;00001;01111;10001;10001;10001;10001;01111"
e="01110;10001;11111;10000;10001;01110"
f="000111;001000;001000;111110;001000;001000;001000;001000;001000"
g="011111;100010;100010;111100;100000;111110;100001;100001;011110"
h="10000;10000;10000;11110;10001;10001;10001;10001;10001"
i="0001;0000;1111;0001;0001;0001;0001;0001"
j="0001;0000;1111;0001;0001;0001;0001;0001;0001;0001;1110"
k="100000;100000;100000;100010;100100;101000;110100;100010;100001"
l="11100;00100;00100;00100;00100;00100;00100;00100;00011"
m="1110110;1001001;1001001;1001001;1001001;1001001"
n="11110;10001;10001;10001;10001;10001"
o="01110;10001;10001;10001;10001;01110"
p="11110;10001;10001;10001;10001;11110;10000;10000;10000"
q="01111;10001;10001;10001;10001;01111;00001;00001;00001"
r="10111;11000;10000;10000;10000;10000"
s="01110;10000;01100;00110;00001;01110"
t="01000;01000;11111;01000;01000;01000;01000;00111"
u="10001;10001;10001;10001;10011;01101"
v="10001;10001;01010;01010;00100;00100"
w="1001001;1001001;1011101;1010101;1010101;0100010"
x="10001;01010;00100;00100;01010;10001"
y="1000001;0100010;0100010;0010100;0010100;0001000;0001000;0011000;1110000"
z="11111;00010;00100;00100;01000;11111"
A="0001000;0011100;0010100;0010100;0111110;0100010;0100010;1000001"
B="11110;10001;10001;11110;10001;10001;10001;11110"
C="00111;01000;10000;10000;10000;10000;01000;00111"
D="111100;100010;100001;100001;100001;100001;100010;111100"
E="11111;10000;10000;11110;10000;10000;10000;11111"
F="11111;10000;10000;11110;10000;10000;10000;10000"
G="001111;010000;100000;100000;100011;100001;010001;001111"
H="10001;10001;10001;11111;10001;10001;10001;10001"
I="11111;00100;00100;00100;00100;00100;00100;11111"
J="11111;00001;00001;00001;00001;00001;10001;01110"
K="100010;100100;101000;111000;100100;100100;100010;100001"
L="10000;10000;10000;10000;10000;10000;10000;11111"
M="1100011;1100011;1010101;1010101;1001001;1001001;1000001;1000001"
N="10001;11001;11001;10101;10101;10011;10011;10001"
O="0011100;0100010;1000001;1000001;1000001;1000001;0100010;0011100"
P="11110;10001;10001;10001;11110;10000;10000;10000"
Q="0011100;0100010;1000001;1000001;1000001;1000001;0100010;0011100;0001000;0001100"
R="11110;10001;10001;10001;11110;10100;10010;10001"
S="01110;10001;10000;01100;00010;00001;10001;01110"
T="1111111;0001000;0001000;0001000;0001000;0001000;0001000;0001000"
U="10001;10001;10001;10001;10001;10001;10001;01110"
V="10001;10001;10001;01010;01010;01010;00100;00100"
W="1000001;1000001;1000001;1001001;1001001;1010101;1010101;0100010"
X="1100011;0100010;0010100;0001000;0001000;0010100;0100010;1100011"
Y="10001;10001;01010;01010;00100;00100;00100;00100"
Z="11111;00001;00010;00100;00100;01000;10000;11111"
n0="01110;10001;10001;10101;10101;10001;10001;01110"
n1="01100;00100;00100;00100;00100;00100;00100;11111"
n2="01110;10001;00001;00001;00010;00100;01000;11111"
n3="01110;10001;00001;01110;00001;00001;10001;01110"
n4="00010;00110;01110;01010;10010;11111;00010;00010"
n5="11111;10000;10000;11110;00001;00001;00001;11110"
n6="01111;11000;10000;11110;10001;10001;10001;01110"
n7="11111;00001;00010;00110;00100;00100;00100;00100"
n8="11111;10001;10001;11111;10001;10001;10001;11111"
n9="01110;10001;10001;10001;01111;00001;00011;11110"
sp="0"
ap="1;1;1"
gl="101;101;101"
cm="011;001;010;100"
dp="1;0;0;0;0;1"
dt="1"
ep="1;1;1;1;1;1;0;1"
ip="01110;10001;00001;00001;00010;00100;00100;00000;00100"
def lp():return"00001;00011;00010;00100;00100;00100;00100;00100;00010;00011;00001"
def rp():return"10000;11000;01000;00100;00100;00100;00100;00100;01000;11000;10000"
def pc():return"0100011;1010010;0100100;0001000;0001000;0010010;0100101;1100010"
def bd():return"1111111"
def pl():return"00100;00100;11111;00100;00100"
def mn():return"11111"
def tm():return"00100;00100;10101;01110;01010;10001"
def dd():return"00001;00010;00010;00010;00100;00100;00100;01000;01000;01000;10000"
def eq():return"11111;00000;11111"
def lb():return"00111;00100;00100;00100;00100;00100;00100;00100;00100;00100;00111"
def rb():return"11100;00100;00100;00100;00100;00100;00100;00100;00100;00100;11100"
def lc():return"00011;00100;00100;00100;00100;01100;00100;00100;00100;00100;00011"
def rc():return"11000;00100;00100;00100;00100;00110;00100;00100;00100;00100;11000"
def la():return"00011;00110;01100;11000;01100;00110;00011"
def ra():return"11000;01100;00110;00011;00110;01100;11000"
def cp():return"010;000;000;000;000;011;001;010;100"
def pi():return"1111111;0100010;0100010;0100010;0100010;0100011"
def sr():return"0000011;0000010;0000010;0000100;0000100;0000100;1100100;0101100;0011000;0011000;0001000"
def rg():return"01101;10110"
def bs():return"10000;10000;01000;01000;00100;00100;00010;00010;00001;00001"
def ca():return"00100;01010;01010;10001"
def ii():return"0110110;1001001;1001001;0110110"
def ar():return"0001000;0000100;0000010;1111111;0000010;0000100;0001000"
def br():return"1;1;1;1;1;1;1;1;1;1;1;1"
def dg():return"111;101;111"
def ml():return"00100;00100;11111;00100;00100;00000;11111"
def at():return"0001100;0110010;0100001;1000111;1001001;1001001;1000101;0100000;0110001;0001110"
def ht():return"010010;010010;111111;010010;010010;111111;010010;010010"
def ad():return"0011000;0100100;0100100;0011000;0110001;1001010;1000100;0111011"
def dl():return"00100;00100;01110;10001;10000;01110;00001;10001;01110;00100"
def uk():return"111111;110011;101101;101101;101101;101101;110011;111111"
aa="01;10"
ga="10;01"
ac="010;101"
dr="101"
cd="010;001;110"

red,green,blue=(255,0,0),(0,255,0),(0,0,255)
black,white,grey=(0,)*3,(255,)*3,(150,)*3
yellow,purple=(255,255,0),(255,0,255)
alt=dict(zip("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '\",:.!?()%_+-*/=[]{}<>;π√~^∞→|°±@#&$\\",[
[a,10],[b,10],[c,10],[d,10],[e,10],[f,10],[g,13],[h,10],[i,10],[j,13],[k,10],[l,10],[m,10],[n,10],[o,10],[p,13],[q,13],[r,10],[s,10],[t,10],[u,10],[v,10],[w,10],[x,10],[y,13],[z,10],
[A,10],[B,10],[C,10],[D,10],[E,10],[F,10],[G,10],[H,10],[I,10],[J,10],[K,10],[L,10],[M,10],[N,10],[O,10],[P,10],[Q,12],[R,10],[S,10],[T,10],[U,10],[V,10],[W,10],[X,10],[Y,10],[Z,10],
[n0,10],[n1,10],[n2,10],[n3,10],[n4,10],[n5,10],[n6,10],[n7,10],[n8,10],[n9,10],
[sp,14],[ap,5],[gl,5],[cm,13],[dp,10],[dt,10],[ep,10],[ip,10],
[lp(),12],[rp(),12],[pc(),10],[bd(),12],[pl(),9],[mn(),7],[tm(),9],[dd(),12],[eq(),8],[lb(),12],[rb(),12],[lc(),12],[rc(),12],[la(),10],[ra(),10],[cp(),13],
[pi(),10],[sr(),11],[rg(),7],[ca(),6],[ii(),9],[ar(),10],[br(),13],[dg(),5],[ml(),10],[at(),12],[ht(),10],[ad(),10],[dl(),11],[bs(),12]]))
acl=["à","â","ä","é","è","ê","ë","î","ï","ô","ö","ù","û","ü","ÿ","ç"]
dif={"à":["a",ga],"â":["a",ac],"ä":["a",dr],"é":["e",aa],"è":["e",ga],"ê":["e",ac],"ë":["e",dr],"î":["i",ac],"ï":["i",dr],"ô":["o",ac],"ö":["o",dr],
"ù":["u",ga],"û":["u",ac],"ü":["u",dr],"ÿ":["y",dr],"ç":["c",cd]}

def decode(char):
 rows=char.split(';')
 return[[int(c)for c in row]for row in rows]
def draw(ltr,xf,yf,cc=black,cb=0,tl=1):
 if cb!=0:fr(xf,yf,7*tl,14*tl,cb)
 acc=0
 if ltr in acl:acc,ltr=decode(dif[ltr][1]),dif[ltr][0]
 lst=decode(alt[ltr][0])if ltr in alt else decode(uk())
 dx,dy=ceil((7-len(lst[0]))/2),alt[ltr][1]-len(lst)if ltr in alt else 2
 for ay in range(len(lst)):
  for ax in range(len(lst[ay])):
   if lst[ay][ax]==1:fr(xf+(ax+dx)*tl,yf+(ay+dy)*tl,tl,tl,cc)
 if acc:
  dx,dy=ceil((7-len(acc[0]))/2),alt[ltr][1]-len(lst)-1-len(acc)if acc!=cd else alt[ltr][1]+1
  dx=dx+1 if acc==decode(cd)or ltr=="i"else dx-1 if acc==decode(ga)else dx
  dy=alt[ltr][1]if acc==decode(cd)else dy+2 if ltr=="i"else dy
  for ay in range(len(acc)):
   for ax in range(len(acc[ay])):
    if acc[ay][ax]==1:fr(xf+(ax+dx)*tl,yf+(ay+dy)*tl,tl,tl,cc)
def write_string(txt,xf,yf,cc=black,cb=0,tl=1):
 rep=rvp=0
 for ch in txt:
  if rep+1<len(txt):
   if txt[rep+1]=="̈":ch="ä"if txt[rep]=="a"else"ë"if txt[rep]=="e"else"ï"if txt[rep]=="i"else"ö"if txt[rep]=="o"else"ü"if txt[rep]=="u"else"ÿ"
   elif txt[rep+1]=="́":ch="é"
   elif txt[rep+1]=="̧":ch="ç"
   elif txt[rep+1]=="̀":ch="à"if txt[rep]=="a"else"è"if txt[rep]=="e"else"ù"
   elif txt[rep+1]=="̂":ch="â"if txt[rep]=="a"else"ê"if txt[rep]=="e"else"î"if txt[rep]=="i"else"ô"if txt[rep]=="o"else"û"
  rep+=1
  if ch in["̈","́","̧","̀","̂"]:continue
  draw(ch,xf+rvp*7*tl,yf,cc,cb,tl)
  rvp+=1
